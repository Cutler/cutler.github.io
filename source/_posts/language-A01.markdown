---
layout: post
title: "入门篇　第一章 C语言"
date: 2014-1-3 15:21:49
create: 2015-6-11 12:14:03
comments: true
categories: 编程语言
tags:
- C
---
　　`C语言`是一门通用计算机编程语言，也是很多软件开发者的入门语言，应用十分广泛。比如我们后面章节会介绍`iOS开发`所使用的`Object-C`语言就是基于`C语言`的。

　　更多关于`C语言`的介绍可以查看这里：http://open.itheima.com/ios/2-29.html ，笔者就不再冗述。

　　笔者由于时间有限，所以本章只是将`C语言`中的各个知识点的语法等细节知识罗列出来，如果你完全不懂`C语言`，那么可能不适合阅读本章的内容。

# 第一节 概述 #

## 程序设计语言 ##
　　计算机语言的种类非常的多，总的来说可以分成`机器语言`，`汇编语言`，`高级语言`三大类。

<br>　　**机器语言**

	-  机器语言是直接用二进制0、1代码指令表达的计算机语言，一条指令(是用0和1组成的一串代码)就是机器语言的一个语句，由操作码和地址码组成。
	-  如：“C7 06 0000 0002”表示在IBM PC上使用的Intel 8x86处理器将数字2移至地址0000(16进制)的指令。
	-  缺点：
	   -  用机器语言编制程序效率低、可读性差，也难以理解、修改和维护。因此人们设计了汇编语言。

<br>　　**汇编语言**

	-  在汇编语言中，用助记符(Memoni)代替操作码(如使用ADD代表加法)，用地址符号(Symbol)或标号(Label)代替地址码。这样用符号代替机器语言的二进制码，就把机器语言变成了汇编语言。如：“MOV X, 2”。
	-  特点：
	   -  使用汇编语言编写的程序，机器不能直接识别，要由一种程序将汇编语言翻译成机器语言，这种起翻译作用的程序叫汇编程序。
	   -  汇编程序是系统软件中语言处理系统软件。汇编程序把汇编语言翻译成机器语言的过程称为汇编。
	   -  汇编语言能够直接访问与硬件相关的存储器或I/O端口。
	-  缺点：
	   -  虽然使用汇编语言编写程序的效率和程序的可读性有所提高，但汇编语言是面向机器的语言，其书写格式在很大程度上取决于特定的计算机机器指令。机器语言与汇编语言又被称为“低级语言”。
	-  提示：
	   -  汇编语言是面向具体机型的，它离不开具体计算机的指令系统，因此，对于不同型号的计算机，有着不同的结构的汇编语言，而且，对于同一问题所编制的汇编语言程序在不同种类的计算机间是互不相通的。

<br>　　**高级语言**

	-  高级语言是相对于低级语言来说的。由于汇编语言依赖于硬件体系，且助记符量大难记，于是人们又发明了更加易用的所谓高级语言。高级语言基本脱离了机器的硬件系统，用人们更易理解的方式编写程序。
	-  特点：
	   -  高级语言与计算机的硬件结构及CPU的指令系统无关。
	   -  高级语言的代码同样不可以被计算机直接识别，需要使用“编译器”对其编译。
	   -  高级语言编译生成的程序代码一般比用汇编语言设计的程序代码要长，执行的速度也慢。
	-  常见的高级语言有：C、C++、Java、Python等。
	-  高级程序语言所写的代码被称为源程序。但是计算机不能直接识别源程序代码，因此必须将源程序代码翻译成机械语言(0,1代码)，只有这样咱们写的代码才能被计算机执行。
	   -  因此，根据将源程序翻译成机器语言的方式，可以进一步将高级语言划分为：编译型语言和解释型语言。C语言就是编译型语言。


## C语言的执行流程 ##
　　程序的执行流程为：

	-  第一步：建立一个后缀名为.c的文件，然后将代码写入到这个文件中。
	-  第二步：使用编译器编译这个.c文件 如果编译通过会生成一个.obj文件。
	-  第三步：将这个.obj文件与在该文件中使用的系统库函数或其他目标程序连接起来，形成一个.exe的文件。
	-  第四步：用户双击这个.exe文件，将程序送入内存，开始执行这个程序。

　　说白了，一个`c语言`代码要经过：`.c`、`.obj`、`.exe`三个阶段。

## 源文件的组成 ##
　　C语言程序都是写在若干个后缀名为`.c`的文件中。一般来说，一个简单的`C语言源文件`由两部分组成：
	-  第一部分：导入头文件语句。
	-  第二部分：函数。

<br>　　范例1：`HelloWorld`。
``` c
#include<stdio.h>
main() {
    printf("Hello,World!\n");
}

```
    语句解释：
    -  首先，要知道，在使用C语言编写的代码中，函数是最基本的组成部分，main(){}就是一个函数。
	   -  这个函数在程序执行的时候，会被系统自动调用。它是每一个程序的入口。C程序，从它开始执行，也是从它结束。
    -  接着，上面的第1行代码是一条导入头文件语句。
       -  因为在程序中使用了printf函数，而printf函数是在stdio.h头文件中的，但是编译器却不知道这一点。所以，需要告诉编译器，printf在什么地方，然后编译器会把printf导入进来。
	-  最后，printf()函数用来输出数据。 在本例中会向控制台输出一条语句：“HelloWorld”。所谓的控制台就是指程序执行时弹出的dos界面。 再说白点就是那个黑色窗口。

<br>　　范例2：输出一个图形。
``` c
#include<stdio.h>
main() {
    printf("****************************\n");
    printf("*        世界,你好         *\n");
    printf("****************************\n");
}
```
    语句解释：
    -  在C语言里，所有的语句都必须写在函数中。所有的语句都以分号“；”结束。字符 “\n”代表换行的意思。

<br>**本节参考阅读：**
- [百度百科 - 计算机语言](http://baike.baidu.com/view/246483.htm)
- [百度百科 - 高级语言](http://baike.baidu.com/view/14900.htm)

# 第二节 基础知识 #
## 变量和常量 ##
<br>**C语言的常见数据类型**
	-  基本数据类型(8种)
	   - 数值类型
	      -  整数类型：  short(2字节)、int(4字节)、long(4字节)
	      -  浮点数类型：float(4字节)、double(8字节)、long double(16字节)
	   - 字符类型：  char(1字节) 
	   - 枚举类型
	-  指针类型
	-  构造类型
	   - 数组
	   - 结构体
	   - 共用体
	-  空类型：void

<br>**常量**
　　常量：程序中值不可以改变的量，分为`字面常量`和`符号常量`。

	-  字面常量
	   -  字面常量：如 1、’c’、2342f、”String”、false等
	-  符号常量
	   -  符号常量：#define PI 3.14

<br>**变量**
　　变量：程序中值可以改变的量。   

	-  变量就像是一个容器，用来保存一个数据。
	   -  一个变量同一时间内只能保存一个数据，当为一个变量赋一个新值的时候，变量中的旧值就会被覆盖了。
	-  变量是有数据类型的，比如：“int i = 5；”就是定义一个整型的变量，并且这个变量保存一个数字：5。
	   -  在编程中，“=”代表的是赋值的意思，“==”才是代表判断两个数是否相等。

<br>**深入了解变量**
　　请记住，`内存`才是程序运行的舞台。所有的程序如果想运行，那么它就必须要被加载入内存，并且得到`CPU`的控制权。 计算机中，存储数据的硬件叫`硬盘`，而不叫`内存`。
　　其实变量名就代表内存中的一个存储空间，当对一个变量进行赋值的时候，其实就是在将这个值放到变量名所代表的空间中去。 如`int i = 10；`则此语句的意思就是：将数字`10`放到`i`所代表的空间当中去。

<br>**标识符规则**
　　所谓的标识符，就是指程序中：`变量`、`函数`、`数组`等元素的`名称`。

	-  标识符必须由大小写字母、下划线、数字组成，且不能以数字开头。
	-  C语言中标识符区分大小写。变量a和变量A是不同的两个变量。
	-  标识符不能使用C语言的保留字。
	-  保留字又称为“关键字”，即保留字就是C语言系统专用的标识符，用户无权使用。如：int、long、if 等。
	-  在C语言中标识符的组成，最好不要超过8个字符。如果两个变量名称的前8个字符相同，则编译器可能将它们认为是同一个变量。

<br>**注释**

	-  单行注释   使用： //
	-  多行注释   使用： /* */

## 整型数据 ##
　　整型数据分为：`整型常量`和`整型变量`。

	-  整型常量，如：45、12、-1 等数字都是整型常量。
	-  整型变量，如：“int i ”中的i就是一个整型变量。

<br>**整型常量**
　　整型常量有三种表示方法：

	-  十进制表示法。如 1、23、-5等都是十进制表示。
	-  八进制表示法。以数字0开头，随后的数不能大于7，如 01、023、-05等都是八进制表示。
	-  十六进制表示法。以0x开头,随后的数不能大于F(A代表10，F代表15)，如-0x12就等于十进制数-18。

<br>**整型变量**
　　整型变量按照范围可以分为如下三类：

	-  基本整型。使用int关键字来定义此类型的变量。
	-  短整型。使用short关键字来定义此类型的变量。
	-  长整型。使用long关键字来定义此类型的变量。

　　C语言标准没有具体规定以上各个数据类型所占的字节数，只要求`long`型的数据长度不短于`int`型，`int`型不短于`short`型。具体如何实现由计算机系统自行决定。但是一般来说：

	-  short型变量占2个字节，取值范围在 -32768 ~ 32767 之间。
	-  int型变量在16位的编译器下占2字节，在32、64位编译器下占4字节。当它占据4字节时，取值范围在 -2147483648 ~ 2147483647之间。
	-  long型变量在16、32位编译器下占4个字节，在64位编译器下占8字节。

　　注意：范围并不是越大越好，除非必要，否则使用`int`就可以了，使用`long`型会降低运算速度。

<br>**无符号变量**
　　定义：无符号变量就是指这个变量只能保存正数，不能保存负数。
　　作用：保存的数据的正数的范围是有符号变量的2倍。
　　语法：`unsigned int i = 10 ；`
　　解释：如果`int`占`4`个字节，那么有符号的`int`就可以表示`+-21`亿之间的数字，而`unsigned int`则可以表示`0 ~ 42`亿之间的数字。
　　其他：无符号变量有三种：`unsigned int`、`unsigned short`、`unsigned long`。
　　提示：`int a` 代表有符号整型变量。`signed int a`也代表有符号整型变量。其中`signed`关键字完全可以不写。 

<br>**整型数据在内存中的表示**
　　数据在内存中是以二进制(`0、1`码)形式存放的。
　　如果定义一个整型变量`int i =10 ；`则会将`10`转换成它的二进制形式：`1010`进行存储。那么变量i的二进制码就是：`00000000 00000000 00000000 00001010`。注意，若未特别指明，则本书中都将`int`型数据看作占`4`个字节。`1Byte`(字节) = `8 bit`(位)。 `1bit`就代表一位二进制数。

　　实际上，在计算机中，数值都是以补码的形式存在的。
	-  正数的补码就是它的原码，也就是它的二进制码。
	-  负数的补码 = 其绝对值的补码 所有位上的数全部取反(所谓的取反，就是指0变1，1变0)后 + 1 。
	   -  如由于1是正数，所以1的补码就是它的原码。
	      -  数字1个补码：00000000 00000000 00000000 00000001
	      -  数字1个补码取反：11111111 11111111 11111111 11111110
	      -  数字-1的补码就是：11111111 11111111 11111111 11111111

　　无符号数的原理就是，最高位(左端)不再代表符号位，而代表数值位。因此无符号变量的在正数范围内的表数范围是有符号数的`2`倍。

<br>　　范例1：加法运算。
``` c
#include<stdio.h>
main() {
    int x = 10;
    int y = 20;
    int z = x + y;
    printf("x + y = %d\n",z);
}
```
    语句解释：
    -  本例中定义3个整型的变量：x 、y 、z 。
    -  变量的赋值有点特殊，int x = 10 ； 就相当于将10赋值给变量x 。即从右向左赋值。
    -  在printf函数中，双引号中的数据会被原样输出。因此如果想输出一个数据需要指定一个标志，以防止该数据被原样输出。%d 用来输出一个整数(short、int、long)。

<br>**数据溢出**
<br>　　范例1：物极必反。
``` c
#include<stdio.h>
main() {
    short x = 32767;
    short z = x + 1;
    printf("z = %d\n",z);
}
```
    语句解释：
    -  short占2个字节，其只能表示 -32768 ~ 32767 之间的数。
    -  32767的补码为：01111111 11111111 。
    -  32767的补码加1后为：10000000 00000000 。而这个编码恰巧又是-32768的补码。
    -  当使用%d输出一个整型变量的时候，默认以有符号10进制的形式输出。因此将10000000 00000000转换成-32768输出。
    -  定理：达到最小变最大，达到最大变最小。所谓，物极必反。这也就是所谓的数据溢出。

<br>**整数默认数据类型**
　　如果一个整数在`-32768 ~ 32767`之间则默认为`int`类型（假设`int`型占`2`字节）。
　　如果一个整数超过了上面的范围，则默认为`long`型。如果此时将这个数字赋值给`short`型变量，则就会数据溢出。
　　如果`int`和`short`型表数的范围是一致的，则`int`型的变量同时也是一个`short`类型的变量。
　　在一个整常量后面加一个字母`L`或者`l`，则此常量就默认为`long`型的。

## 实型数据 ##
　　实数又称为浮点数。实型数据分为：
	-  实型常量。如：4.5、1.2f、-1. 等都是实型常量。
	-  实型变量。如：“float f”中的f就是一个实型变量。

<br>**实型常量**
　　实型常量有两种表示方法：

	-  十进制小数形式：
	   -  由数字和小数点组成(注意必须要有小数点，但小数点之后，可以没有内容)，如 1.2f、2.3、-5. 等都是十进制小数形式。
	-  指数形式：
	   -  指数形式是实型数据特有的表示方法。比如，12E3或者12e3都是12000的指数形式。
	   -  e就代表10的次幂。E3就代表10的3次幂。E和e大小写任意。
	   -  e的左右两边都必须有数字，且右边的数字必须是整数。但可以是负整数。
	   -  规范化指数形式：在字符e的左面的数字中，小数点的左面有且仅有一位非零数字。如：1.2e2 就是规范化指数形式。

<br>**实型变量**
　　C语言中实型变量分为单精度(`float`)型、双精度(`double`)型、长双精度(`long double`)型。

	-  单精度型。使用float关键字来定义此类型的变量。占4字节。
	-  双精度型。使用double关键字来定义此类型的变量。占8字节。
	-  长双精度型。使用long double关键字来定义此类型的变量。占16字节。

<br>**实型数据的舍入误差**
<br>　　范例1：大家都有极限。
``` c
#include<stdio.h>
#include<stdio.h>
main() {
    float a = 123456.789e5;
    printf("a = %f\n",a);
}
```
    语句解释：
    -  一个小数默认为double类型的常量，如果将一个double常量赋值float的变量，则就可能损失数据精度，因为double的表数范围比float的广。因此程序在编译的时候会出警告信息。
    -  如果一个小数后面加上一个F或者f ，则该数就默认为float型的常量。如： float f = 1.2f 。 则编译就不会出警告。
    -  %f用来输出一个float和double型的变量或常量，输出long double 可以使用%lf 。
    -  一个float的变量只能表示7位的有效数字，后面的数字是无意的。就算有的时候，第八位数字也是正确的。但是，无意义。
    -  实型数据(float、double) 都会默认保留6位小数。实型数据没有无符号这一说。

## 字符型数据 ##
　　字符型数据分为：

	-  字符型常量。如‘a’、‘\n’等都是字符型常量。
	-  字符型变量。如：“char c”中的c就是一个字符型变量。

<br>**字符型常量**
　　`C语言`的字符型常量是使用单引号括起来的一个字符。如：`‘a’`、`‘\n’`等都是字符型常量。注意`‘a’`和`‘A’`是不同的两个字符常量。
　　除了以上形式的字符常量外，`C语言`还允许用一个特殊形式的字符常量，就是以一个`“\”`开头的字符序列。 这种字符被称为：转义字符。如：咱们在前面使用的`‘\n’`就是一个转义字符，代表换行。
``` c
字符形式                                           含义
\n                                         换行
\t                                         跳到下一个tab位置。
\b                                         退一格
\r                                         回车符。回到当前行的开头。
\f                                         换页
\\                                         输出一个‘\’
\’                                         输出一个单引号‘‘’
\”                                         输出一个双引号‘“’
\ddd                                       1到3位8进制数所代表的字符
\xhh                                       1到2位16进制数所代表的字符
```

　　提示：

	键盘中Tab键一般代表8个空格。但是，不是从当前位置上向后位移8个空格，而是将整个窗口按每8个空格划分为一个tab位，当使用\t的时候，是以当前位置为起点，跳到下一tab位置。

<br>**字符型变量**
　　字符型变量用来存储字符常量。但是一个字符变量只能保存一个字符常量。在`C语言`中一个字符必须用一对`单引号`包括起来。

	-  如：char ch = 'A'；是正确的。
	-  如：char ch = 'ab'；是错误的。

<br>**字符型数据在内存中的表示**
　　将一个字符常量赋值给一个字符变量。实际上并不是把该字符本身放到内存单元中去，而是将该字符的`ASCII`码放到存储单元中。如：

	-  'A'的ASCII码为65。
	-  'a'的ASCII码是97。
	-  数字'0'的ASCII码是48。

　　既然字符是以`ASCII`码形式存储的，那么存储的就是一个整数。很显然，这和整型数据在内存中的存储是一样的。

<br>　　范例1：他们可以互换。
``` c
#include<stdio.h>
main() {
    char ch = 'c';
    int i = 97;
    printf("c= %c,i= %c\n",ch,i);
    printf("c= %d,i= %d\n",ch,i);
}
```
    语句解释：
    -  使用%c可以输出一个字符型的数据。也可以输出一个整型的数据。
    -  当使用%c输出一个整数的时候，就先将这个整数转换成ASCII码中的一个字符，然后在输出。
    -  返过来也同理。将一个字符变量按照%d的方式输出的时候，会将该字符的ASCII码输出。

<br>　　范例2：超过了限制。
``` c
#include<stdio.h>
main() {
    char ch = 153;
    printf("c= %d\n",ch);
}
```
    语句解释：
    -  C语言中char类型变量的取值范围是-128~127，本范例为一个char类型的变量赋值153，会导致数据溢出。此时，用%d格式符输出时，就会得到一个负整数。
    -  由此可见，%d是按照有符号十进制形式输出数据的。

<br>　　范例3：又现无符号。
``` c
#include<stdio.h>
main() {
    unsigned char ch = 153;
    printf("c= %d\n",ch);
}
```
    语句解释：
    -  字符型也有有符号和无符号之分。

<br>**字符串常量**
　　`C语言`除了允许使用字符常量外，还允许使用字符串常量。字符串常量使用一对双引号包含。如：`"abc"`、`"张三、李四"`。

<br>　　范例1：`HelloWorld`。
``` c
#include<stdio.h>
main() {
    printf("HelloWorld\n");  //输出一个字符串常量HelloWorld
}
```
    语句解释：
    -  注意：'a'和"a"是完全不同的。一个代表字符a，另一个则代表字符串a 。

<br>**字符与字符串的区别**
　　C语言规定，在每一个字符串的结尾都必须有一个`“字符串结束标志”`，以便系统据此判断字符串是否结束。 这个字符串结束标志，就是字符`'\0'`，这个字符的`ASCII`码为`0`，它代表一个“空操作字符”，而且是一个`不可显示`的字符。

<br>　　范例1：所谓的“字符串结束标志”。
``` c
#include<stdio.h>
main() {
    printf("A\0B");
}
```
    语句解释：
    -  程序只会输出A，不会再输出B。因为输出A之后，扫描到了\0，则printf函数就认为此字符串结束了，也就停止输出了。

<br>　　如果有一个字符串：`"a"`，实际上在内存中存储的是`"a\0"`，此字符串的长度不是`1`，而是`2`。 但是不要人为的为每一个字符串都写上一个`\0`，这个工作系统会自动帮我们做。因此说`'a'`和`"a"`是完全不同的。


## 各数据类型混合运算 ##
　　整型、实型、字符型可以混合运算。各数据类型的优先级：
``` c
低   short、char   →   int   →   long   →   float   →   double   高
```

<br>　　自动转换：

	-  将一个低优先级的常量或变量赋给一个高优先级的变量时，会产生自动转换。
	   -  long i=5;      5默认为int型的常量此时赋给一个long型变量，就会进行转换。
	   -  double d=2.4f  

<br>　　强制转换：

	-  将一个高优先级的常量或变量赋给一个低优先级的变量时，需要手工进行强制转换。
	   -  int i=(int) 1.5   将double型的常量强制转换成int型，结果为1，即强制截断。

<br>　　自动类型提升：

	-  a和b作某种运算，先把低级类型转成高级类型后在开始运算。
	-  a和b中最高是double，结果就是double 。
	-  a和b中最高是float，结果同样是double 。
	-  a和b中最高是long，结果就是long 。
	-  除此之外，结果都是int 。

## 运算符与表达式 ##
<br>**运算符划分**
``` c
算术运算符：    +    -    *   /   %    ++  --
关系运算符：    >   <    >=   <=   ==   !=
赋值运算符：    =   +=   -=  *=  /=   %=  ^= &= |= <<= >>=  
逻辑运算符：    &&   ||   !   &   | 
位运算符：      !   &   |  >>  <<  ^ 
条件运算符：    ? :
```

<br>**运算符优先级**
<center>
![](/img/language/language_a01_01.jpg)
</center>

<br>**逻辑运算符简介**
<br>　　C语言提供了三种逻辑运算符：

	-  与运算：参与运算的两个数同时为true时，结果才为true。
	-  或运算：参与运算的两个数有一个为true时，结果就为true。
	-  非运算：参与运算的一个数若为true则结果为false，若为false则结果为true。

<br>　　在三种逻辑运算的基础上，又可以分为：`简洁运算`和`全部运算`。

	-  所谓的简洁运算就是指，如果第一个参数就能决定表达式的值，则系统不会去查看第二个参数。
	-  所谓的全部运算就是指，即使第一个参数能决定表达式的值系统也会去查看第二个参数。

<br>　　简洁运算符：`&&`（简洁与）、`||`（简洁或）、`!`（非）。
``` c
a && b       // 如果a为false 则不再判断b，表达式的值自动为false。
a ||  b      // 如果a为true  则不再判断b，表达式的值自动为true。
!a           // 如果a为true  则表达式的值为false，反过来一样。

```

　　全部运算符：`&`（与）、`|`（或）、`!`（非），其中非的作用与上面一样。

<br>**表达式**
　　与各种运算符相对应的有各种表达式：

	-  算术表达式  如： 3 * 4
	-  关系表达式  如： 3 > 4
	-  赋值表达式  如： a = 4
	-  逻辑表达式  如： 3 == 4
	-  条件表达式  如： 3 > 4?  true : false
	-  位运算表达式  如： 3 | 4

<br>　　范例1：整数相除。
``` c
#include<stdio.h>
main() {
    int i = 3;
    int j = 2;
    printf("%d\n",i/j);
}
```
    语句解释：
    -  程序执行的结果为：1 。 因为在编程中2个整数相除的结果就一定是一个整数。小数部分会被截断。注意：是截断而不是四舍五入。

<br>　　范例2：强制类型转换。
``` c
#include<stdio.h>
main() {
    double d = 5.3f;
    int j = (int)d;
    printf("%d,%f\n",j,d);    // 输出 5,5.300000
}
```
    语句解释：
    -  (int)d;仅仅是将变量d中的值取出来后，再将该值转化为int类型，但这个转换操作并不会改变变量b中的值。

<br>　　范例3：取模运算。
``` c
#include<stdio.h>
main() {
    int x = 5;
    int y = 2;
    int z = x % y ;
    printf("%d\n",z);
}
```
    语句解释：
    -  所谓的取模运算，说白了，就是计算两个数的余数。
    -  使用 % 进行取模操作。
    -  在C语言中，只有整型数据可以进行%运算。实型数据则不可以。

<br>　　范例4：自增、自减。
``` c
#include<stdio.h>
main() {
    int x = 5;
    int y = ++x;
    printf("%d\n",y);
}
```
    语句解释：
    -  先使x内保存的值增加1，然后在将x中的新值赋给变量y 。
    -  而x ++ 则代表，先将x中的值赋给变量y ，然后在使x中的值增加1 。
    -  自减也是同样的道理。

<br>　　范例5：不要做无为的挣扎。
``` c
#include<stdio.h>
main() {
    int x = 3;
    int y = (x++)+(x++)+(x++);
    printf("%d\n",y);
}
```
    语句解释：
    -  在实际开发中不要这么写。

<br>　　范例6：赋值语句。
``` c
#include<stdio.h>
main() {
    int x = 3;
    x+=5;      // 相当于 x = x + 5；
    printf("%d\n",x);
}
```
    语句解释：
    -  其他几个用法是一样的。

<br>　　范例7：逗号表达式。
``` c
#include<stdio.h>
main() {
    int x = 5;
    int y = (x-=3,x*3,x+5);
    printf("%d\n",y);
}
```
    语句解释：
    -  逗号表达式的值，是最右边的一个表达式的值。
    -  程序执行的结果是： 7 。
    -  并不是任何地方出现的逗号都代表逗号表达式。
    -  如：printf(“%d,%d”,5,6)  此时的逗号就只是起到间隔的作用。

# 第三节 程序结构流程 #

## C语言IO ##
　　所谓`IO`其实就是指：输入/输出(`input/output`) 。
　　咱们在前面程序中一直都在使用的一条语句`#include<sidio.h>`中的`stdio`全称就是：标准输入/输出(`standard input /output`)。
　　`C语言`本身没有提供输入输出语句，输入输出的操作是由函数来完成的。如咱们一直在用的一个`printf()`函数，就是用来完成输出操作。
　　`C编译系统`和`C库函数`是分开设计的，因此不同的计算机系统所提供的函数的数量、名称、功能不完全相同。不过有些通用的函数(`printf`、`scanf`等)还是一样的。

<br>**字符数据的IO**
<br>　　范例1：`putchar()`。
``` c
#include<stdio.h>
main() {
    int x = 97;
    putchar(x);
    putchar(98);
    putchar('c');
    putchar('\n');
}
```
    语句解释：
    -  putchar函数也是在stdio.h头文件中定义的。因此需要导入这个头文件。putchar向标准输出流中输出数据，默认是向命令行中输出。
    -  putchar顾名思义，就是输出一个字符，字符可以是：一个变量、整数、字符常量、转义字符。

<br>　　范例2：`getchar()` 。
``` c
#include<stdio.h>
main() {
    int x ;
    x = getchar();
    putchar(x);
    getchar();
    putchar(getchar());
}
```
    语句解释：
    -  getchar函数也是在stdio.h头文件中定义的。因此需要导入这个头文件。
    -  getchar顾名思义，就是读入一个字符。
    -  但是有一点要注意，程序中当用户通过键盘输入第一个字符a的时候，会产生2个字符，一个字符是‘a’另一个字符是用户按的回车键。因此在此增加了一个getchar()将回车键给读出来。

<br>　　范例3：大小写转换 。
``` c
#include<stdio.h>
main() {
    int x =97;	
    putchar(x-32);
}
```
    语句解释：
    -  小写字符的ASCII码比大写字母的ASCII码 大32 。

<br>　　范例4：`HelloWorld`。
``` c
#include<stdio.h>
main() {
    printf("\"Hello World\"");
    putchar('\n'); 
}
```
    语句解释：
    -  双引号必须通过转义符号，才可以输出。单引号也是一样的。

<br>**格式化IO**
　　所谓的格式化`IO`，顾名思义，就是咱们可以控制程序，来要求用户按咱们规定的格式进行`IO`操作。

　　首当其冲，printf()函数，用来向标准输出流(屏幕)输出数据。
　　语法格式：`printf(格式控制列表，输出列表)`

　　首先，要知道，`“格式控制列表”`说白了就是一字符串常量。
　　然后，要知道，字符串常量内的数据会被原样输出到屏幕中去。
　　因此，要知道，如果想输出各种数据类型，就需要使用特定的格式控制符。
　　说白了，所谓的格式控制符，就是咱们前面谈到的`“%d %c %f”`等等。

<br>　　范例1：谁说字符串常量会被原样输出的？
``` c
#include<stdio.h>
main() {
    printf("Hello World\n",4,5,2);
}
```
    语句解释：
    -  看到了吧？不信不行啊。这又是HelloWorld 。
    -  由于在格式控制列表中没有使用格式控制符，因此，就算咱们指定了输出列表，数据也不会被程序输出。
    -  所以，想输出数据，就只能按规矩来办事。使用  格式控制符。

<br>　　范例2：格式控制符？有，有点意思。
``` c
#include<stdio.h>
main() {
    printf("%s说: %d+%d=%f%c","Tomcat",1,1,2.F,'\n');
}
```
    语句解释：
    -  %s可以输出一个字符串，或者字符数组。
    -  %d可以输出一个整数。如：int 、short 、long 。
    -  %f可以输出一个浮点数。如：float 、double 、long double。
    -  %c可以输出一个字符。char 。
    -  在格式控制列表中出现的所有非格式控制符的字符都会被原样输出，格式控制符的位置，会被输出列表中对应的数据所替代。格式控制符以%开头。

<br>　　范例3：那我要是，这样呢？
``` c
#include<stdio.h>
main() {
    printf("%s说: %d+%d=%f%c\n");
}
```
    语句解释：
    -  如果不指定输出列表或者输出列表中的参数比格式控制列表中的格式控制符少，程序的结果就是，随机输出数据。
    -  至少数值类型(%d %f )是这样的。
    -  如果有兴趣，可以测试一下，使用%d输出实型数据是什么结果。然后再试试其他的。我曾经就这么干过….后来发现，这样做很没劲。但是多探讨一下，没坏处。

<br>　　范例4：指定列宽啊。
``` c
#include<stdio.h>
main() {
    printf("%3d\n",5);
}
```
    语句解释：
    -  如果在%d中间增加一个数字，则代表指定列宽。
    -  本例中，使用在%d中间增加一个数字3，代表要输出的数字占3列。
       -  如果数字不足3位，则左端补空格。
       -  如果超过3位，则指定的3就无效了，程序会保证数字正常显示。

<br>　　范例5：输出长整型。
``` c
#include<stdio.h>
main() {
    long l = 222222222;
    printf("%ld\n",l); 
}
```
    语句解释：
    -  %d是按照int型输出数据的。如果int和long所占的字节不同。则就不能使用%d输出long型的数据，此时需要使用%ld来输出。
    -  在VC++6.0中int和long都占4个字节。因此使用%d输出long型数据，完全没有问题。

<br>　　范例6：进制啊进制。
``` c
#include<stdio.h>
main() {
    int i = 10;
    printf("%o\n",i); 
    printf("%x\n",i); 
}
```
    语句解释：
    -  使用%o 将数字以八进制的形式输出。
    -  使用%d将数字以十进制的形式输出。
    -  使用%x将数字以十六进制的形式输出。
       -  对于八进制和十六进制来说，若想输出进制的符号，则可以加上一个“#”号。如：输出八进制数据“%#o”或数据十六进制数据“%#x”

<br>　　范例7：无符号数输出。
``` c
#include<stdio.h>
main() {
    int i = -10;
	printf("%u\n",i); 
}
```
    语句解释：
    -  使用%u将数据以无符号十进制的形式输出。
    -  记住：达到最大变最小，达到最小变最大。

<br>　　范例8：右端补空格。
``` c
#include<stdio.h>
main() {
    float f1 = 5.f;
    float f2 = 6.f;
    printf("%-10f,%10f\n",f1,f2); 
}
```
    语句解释：
    -  %f 也可以指定列宽输出。
    -  列宽为负数，则右端补空格。如果数字超过指定列宽，则列宽自动失效。
    -  实型数据，输出的时候，总是会保留6位小数。

<br>　　范例9：%e 。
``` c
#include<stdio.h>
main() {
    float f1 = 5123.f;
    printf("%e\n",f1); 
}
```
    语句解释：
    -  按标准化指数形式输出数据。指数部分占3列。
    -  程序结果：5.123000e+003

<br>　　范例10：%g 。
``` c
#include<stdio.h>
main() {
    float f1 = 5123.f;
    printf("%g\n",f1); 
}
```
    语句解释：
    -  %g 就是自动选择符。 其实输出实型数据只有2种方式：%f 和 %e 。
    -  使用%g 就是自动选择
       -  %f 和%e 两者中 输出当前这个数据时 所占列最小的一个选择符，然后用他进行输出操作。且不会输出没意义的数字0 。

<br>　　范例11：最后的%s 。
``` c
#include<stdio.h>
main() {
    printf("%3.7s\n","HelloWorld  Tomcat"); 
}
```
    语句解释：
    -  %s同样可以指定列宽。
    -  本例中指定的为3.7 ，含义为：
       -  本字符串占3列。如果超过3列，则指定的列宽自动无效。
       -  但是只输出字符串中的前7个字符。
	-  如果想输出%，可以使用“%%”输出。如： printf("%%");


　　次当其冲，`scanf()`函数，用来从标准输入流(键盘)读入数据。
　　语法格式：`scanf(格式控制列表，地址列表)`

　　首先，要知道，“格式控制列表”说白了就是一字符串常量。同printf()函数。
　　然后，要知道,从键盘读入的数据后,要将它存到内存中的某一个位置中去。以便稍后使用。
　　因此，要知道，想要将一个数据存到内存中去，需要提供一个内存中地址。
　　说白了，如果不提供内存地址，谁知道咱们想把数据存哪啊？系统也不能擅作主张的随便存一个地方啊，那样的话，咱们又不知道系统存哪了，照样没法用。

<br>　　范例1：一个数字，10。
``` c
#include<stdio.h>
main() {
    int  i;
    scanf("%d",&i);
    printf("%d\n",i); 
}
```
    语句解释：
    -  前面也说了，一个变量就代表内存中的一个存储空间。
    -  “&”符号，在C语言中，有多个含义，其中一个含义，就是 取得地址 的意思。
    -  &i 就是把i所代表的存储空间 在内存中的地址取出来。 然后交给系统，系统再将数据存储到那个空间中去。
    -  提示：在计算机领域中，什么事一旦谈到“系统”俩字，那这玩意可就复杂了。
       -  所以，如果以后见到什么咱们不知道的事，就跟别人说，这是“系统”。
       -  然后别人就会“恍然大雾”  “哦 ~ 那玩意高深”。嘿嘿。

<br>　　范例2：按规矩来，准没错。
``` c
#include<stdio.h>
main() {
    int  i,j;
    scanf("i=%d,j=%d",&i,&j);
    printf("i=%d,j=%d\n",i,j); 

//咱们输入：  i=4,j=1
//程序输出：  i=4,j=1

}
```
    语句解释：
    -  在printf()函数中，格式控制列表中的数据会被原样输出。
    -  在scanf()函数中，所有出现在格式控制列表中的字符，在咱们输入数据的时候都必须原样重写一遍。
    -  本例中scannf中的格式控制列表中写的是："i=%d , j=%d"
    -  因此咱们输入输出的时候，要原样重写一遍：i=4 , j=1
    -  scanf()函数中的格式控制列表中空格符照样需要重写。


其他：

	-  输入数据的时候，不能指定精度。如：scanf(“%7.3f”，&a) 这是错误的。
	-  如果在%后面有一个“*”附加说明符，表示跳过它指定的列数。
	   -  scanf(“%2d  %*3d %2d”)
	   -  其中%*3d就代表读取3位整数，但是不将它赋值给任何变量。具体的解释，请参阅老谭的《C语言程序设计》。
	-  如果有 scanf(“%d  %d”,&a,&b)；  两个%d之间存在2个空格键。
	   -  则输入数据的时候，在两个数字之间必须存在至少2个空格建(可以多写)。

<br>　　范例3：计算三角形的面积。
``` c
#include<stdio.h>
#include<math.h>
main() {	 
    // 面积公式：sqrt(s*(s-a)(s-b)(s-c))
    // 提示：其中s = (a+b+c)/2 。 sqrt()函数代表平方根。
    float a , b ,c , s ;
	double area ;
	printf("请输入三角形的三个边长(空格间隔):");
	scanf("%f%f%f",&a,&b,&c);
    s = (a+b+c)/2;
    area = sqrt(s*(s-a)*(s-b)*(s-c));
    printf("面积为：%.2f\n",area);

// 请输入三角形的三个边长(空格间隔):3 4 6
// 面积为：5.33
}

```
    语句解释：
    -  本例中scanf()函数中的格式控制列表为"%f%f%f" 其内的3个%f之间没有任何字符，函数scanf()默认的间隔符就是空格，因此输入的数据的时候，相邻的数据间只需要间隔一个空格即可。
    -  函数sqrt()是math头文件中的函数。因此需要导入math .h文件。
    -  本例中printf("面积为：%.2f\n",area); 的含义为：
       -  输出一个实型变量 area ，但是要保留两位小数。即.2代表保留两位小数的意思。
       -  %5.3f 含义：输出一个浮点数，数字占5列，并且该数以保留3位小数的形式输出。

## 顺序结构 ##
　　在结构化程序设计中有三种结构：顺序结构、分支结构、循环结构。在此简单的讨论一下顺序结构。
　　所谓的顺序结构，说白了就是指，程序从函数的开头开始顺序执行，一直到函数的结尾。

<br>　　范例1：一元二次方程 ax2+bx+c=0。
``` c
#include<stdio.h>
#include<math.h>
main(){	 
    float a , b ,c ;
	double x1, x2, temp;
	printf("请输入a,b,c三个数(逗号间隔):");
	scanf("%f,%f,%f",&a,&b,&c);
    temp = sqrt(b*b - 4*a*c);
	x1 = (-b + temp )/2*a;
	x2 = (-b - temp )/2*a;
	printf("x1=%.2f,x2=%.2f\n",x1,x2);
}
// 请输入a,b,c三个数(逗号间隔):1,3,2
// x1=-1.00,x2=-2.00
```

<br>　　范例2：提示一下吧。
``` c
#include<stdio.h>
#include<math.h>
main(){	 
    float a ;
	scanf("%f",&a);
	
    float b ;
	scanf("%f",&b);

	printf("%f,%f\n",a,b);
}

```
    语句解释：
    -  上面的程序是错误的。
    -  函数体分为两部分：定义部分和执行部分。
       -  定义部分：就是用来定义变量的。
       -  执行部分：就是用来书写语句的。
	-  在一个函数体中定义部分和执行部分是不能交叉书写的。并且，必须先写定义部分，后写执行部分。
	-  说白了，在一个函数中 必须先将此函数中，要使用到的所有变量，都定义在函数开始的部分。定义完变量后，才可以写语句。
	-  把本例中的float b;  拿到scanf("%f",&a); 前边就可以了。

## 分支结构 ##
　　分支结构又称为选择结构。在C语言中有两种实现方式：

	-  单分支：If 语句。
	-  多分支：Switch语句。

<br>　　范例1：“如果”语句。
``` c
#include<stdio.h>
main(){
	int a = 5;
    if(a>=5){
		printf("a>=5\n");
	}
}

```
    语句解释：
    -  在C语言中没有boolean型数据。而使用非0和0来代表真与假。
    -  如果if语句中的表达式的值为非0(正数和负数均可) 则执行if语句中的子语句。

<br>　　范例2：“如果”语句2.0。
``` c
#include<stdio.h>
main(){
	int a = 5,b;
	b = a>=5;
	printf("%d\n",b);
}
```
    语句解释：
    -  表达式 a>=5 的返回值为1。 而1就是所谓的非0。 而非0 就是所谓的真。

<br>　　范例3：“如果”语句3.0。
``` c
#include<stdio.h>
main(){
	if(-1){
		printf("-1也是非0\n");
	}
}

```
    语句解释：
    -  -1也是非0

<br>　　范例4：“否则”语句1.0。
``` c
#include<stdio.h>
main(){
	if(0){
		printf("-1也是非0\n");
	}else{
		printf("0是0\n");
	}
}

```
    语句解释：
    -  0就代表假的意思。
    -  if()语句中如果出现假，则就不会执行if()语句中的语句，而回去执行else语句。
    -  if就相当于“如果为真” else 就相当于“否则”。

<br>　　范例5：闰年。
``` c
#include<stdio.h>
main(){
	int year = 2004;
	if((year%4==0 && year%100!=0) || (year%400==0)){
		printf("是闰年");
	}else{
		printf("不是闰年");
	}
	putchar('\n');
}

```
    语句解释：
    -  一个年份如果能整除4但是不能整除100 则是闰年。
    -  一个年份如果能整除400则也是闰年。
    -  否则就是平年。

<br>　　范例5：所谓的else if 。
``` c
#include<stdio.h>
main(){
	int year = 2004;
	if(year<=1000){
		printf("小于等于1000");
	}else if(year<=2000){
		printf("大于1000且小于等于2000");
	}else{
		printf("2000以上");
	}
	putchar('\n');
}
```
    语句解释：
    -  其实if 、for等语句如果旗下只有一条语句则可以不写大括号。
    -  所谓的else if 就是利用的这个原理。

上例中就可以改写为下例。
``` c
#include<stdio.h>
main(){
	int year = 2004;
	if(year<=1000){
		printf("小于等于1000");
	}
else 
	  if(year<=2000){
			printf("小于等于2000");
	  }
	  else{
			printf("无法计算");
	  }
	putchar('\n');
}

```
    语句解释：
    -  if …else 其实是一个语句。它们是一体的。
    -  if 单独使用的时候，它代表一条语句。当if和else配合使用的时候，它们就组合成为了一条语句。
    -  else是不可以单独拿出来使用的。If却可以。

<br>　　范例6：switch语句。
``` c
#include<stdio.h>
main(){
	int score = 89;
	switch(score/10){
	   case 10: case 9: 
		   printf("优秀");break;
	   case 8: 
		   printf("良好");break;
	   case 7:case 6:
		   printf("一般");break;
	   default:
		   printf("不及格");break;
	}
	putchar('\n');
}
```
    语句解释：
    -  程序会依次使用switch()中的变量与case后的常量进行匹配。
       -  如果匹配成功则，会执行case后面的语句。
       -  如果匹配失败则，会继续匹配下一个case 。
    -  匹配成功后，不会在重新匹配，会一直执行完之后的所有语句。因此需要break 关键字。
    -  如果所有的case都失配了，则会执行dedault后面的语句。如果没有写default关键字，则程序会直接跳出switch语句。继续执行switch之后的其他语句。
    -  如果多个case 的处理方法是相同的，可以将多个case放在一起写。
    -  case 和default的排列顺序可以任意。

<br>　　范例7：条件运算符。
``` c
#include<stdio.h>
main(){
	int a = 10 , b;
    b = a>5? 100:200;
	printf("%d\n",b);
}
```
    语句解释：
    -  条件运算符： 表达式1? 表达式2:表达式3
       -  如果表达式1的值为真，则此整个条件表达式的值为表达式2个值。
       -  如果表达式1的值为假，则为表达式3的值。

## 循环结构 ##
　　循环结构：分为直到循环和当型循环。

	-  直到循环：所谓直到循环,就是,程序流程一旦执行 到 循环体，至少会循环一次。使用 do….while()  实现。
	-  当型循环：只有 当 条件满足时,循环体才会执行,最少时，一次都不执行。使用 while(..){}和for(..)来实现。

　　循环结构在C语言中有四种实现方式：goto语句、for语句、while语句、do…while语句。

<br>　　范例1： 不招人喜欢的goto ？
``` c
#include<stdio.h>
main(){	
	int i = 1,sum = 0;
	loop:
	  sum += i;
	  i+=1;
	  if(i<=100)
		  goto loop;
	printf("1加到100的和为：%d\n",sum);
}
```
    语句解释：
    -  关于goto了解即可。loop是一个标签，可以任意修改。


<br>　　范例2： for语句。
``` c
#include<stdio.h>
main(){	
	int i ,sum = 0;
	for(i=1;i<=100;i++){
		sum += i;
	}
	printf("1加到100的和为：%d\n",sum);
}

```
    语句解释：
    -  for语句的语法：
       -  for(表达式1；表达式2；表达式3)
          -  表达式1用来初始化循环控制变量。
          -  表达式2用来判断循环是否应该结束。
          -  表达式3用来迭代循环控制变量。
	-  其中3个表达式都可以省写，如果省写表达式2，则默认为真 。但是2个分号不能省写。

<br>　　范例3： while语句。
``` c
#include<stdio.h>
main(){	
	int i=0 , sum = 0;
	while(1){
		i++;
		sum += i;
		if(i==100){
			break;
		}
	}
	printf("1加到100的和为：%d\n",sum);
}

```
    语句解释：
    -  在循环语句中可以使用break跳出最内层的循环。 如果只有一层循环，则直接跳出去。程序会接着从循环语句之后的第一条语句开始执行。
    -  while()和if语句是一样的。只要表达式的值为非0，则循环就会一直进行下去。
    -  for循环中也可以使用break语句。

<br>　　范例4： do….while语句。
``` c
#include<stdio.h>
main(){	
	int i=101 ,sum = 0;
	do{
        sum +=i;
	}while(i<=100);
	printf("和为：%d\n",sum);
}

```
    语句解释：
    -  程序本意是如果i<=100才执行循环体。程序i的值初为101，是不应该执行循环体的。
    -  但是由于do…while()语句的特殊性。至少执行一次，然后再判断循环条件。因此程序会输出101。
    -  注意，do…while()；最后的那个分号不可以丢掉。

<br>　　范例5： 九九乘法表。
``` c
#include<stdio.h>
main(){	
	int i , j ;
	for(i=1;i<=9;i++){
		for(j=1;j<=9;j++){
			if(j<=i){
				printf("%d*%d=%2d  ",j,i,(i*j));
			}else{
				break;
			}
		}
		putchar('\n');
	}
}

```
    语句解释：
    -  本例就使用了双层循环+break 关键字。


<br>　　范例6： continue。
``` c
#include<stdio.h>
main(){	
	int i ;
	for(i=1;i<=10;i++){
		if(i%2==0){
			continue;
		}else{
			printf("%d ",i);
		}
	}
	putchar('\n');
}

```
    语句解释：
    -  continue关键字。用来结果本层循环体的当前一轮循环。

<br>　　范例7： 做个题吧，输出如下图形：
``` c
#include<stdio.h>
main(){	
	int space=8,xing=-1;
	int i,j,k;
	for(i=1;i<=7;i++){
		if(i<=4){
			space -= 2;
			xing  += 2;
		}else{
			space += 2;
			xing  -= 2;
		}
		for(j=1;j<=space;j++){
			putchar(32);   //空格符的ASCII码为32
		}
		for(k=1;k<=xing;k++){
			printf("* ");
		}
		putchar('\n');
	}
	putchar('\n');
}
```

# 第四节 数组 #

## 一维数组 ##
　　所谓的数组，其实就是多个类型相同的变量，组合而成的一个连续的序列。
　　数组是有数据类型的，如：整型数组、实型数组、字符数组。它们分别能保存整数、实型数据、字符型数据。

<br>　　范例1：整型数组。
``` c
#include<stdio.h>
main(){	
	int array[10];
}

```
    语句解释：
    -  在C语言中数组的中括号必须放在数组的名字后面，并且在定义数组的同时需要指定数组的长度。
    -  数组的长度只能是常量或者符号常量。不能是变量。

<br>　　范例2：数组的引用。
``` c
#include<stdio.h>
main(){	
	int array[10],i;
	for(i=0;i<10;i++){
		array[i]=i;
	}
	for(i=0;i<10;i++){
		printf("%d ",array[i]);
	}
	putchar('\n');
}

```
    语句解释：
    -  数组的元素下标从0开始，到数组的长度-1结束。 本例中数组的长度为10，因此10个元素的下标依次从0~9。

<br>　　范例3：数组的初始化。
``` c
#include<stdio.h>
main(){	
	int array[10]={1,2,3,4,5};
	int i;
	for(i=0;i<10;i++){
		printf("%d ",array[i]);
	}
	putchar('\n');
}

```
    语句解释：
    -  数组可以在定义的同时初始化。 但是参数的个数必须小于等于数组的长度。
    -  在此种初始化数组的方式中，只要给其中一个元素赋值，那么其他元素就会自动赋默认值。
    -  未赋值的元素值：
       -  整型数组默认为0。
       -  float型数组默认为0.0f 。
       -  字符型数组默认为‘\0’。
	-  如果数组中的元素未赋值，但是却直接输出数组中的元素，则输出的数据是不确定的。

<br>　　范例4：数组的初始化2.0。
``` c
#include<stdio.h>
main(){	  
	int array[]={1,2,3,4,5}; 
	int i;
	for(i=0;i<5;i++){
		printf("%d ",array[i]);
	}
	putchar('\n');
}

```
    语句解释：
    -  定义数组的同时，为数组初始化，可以不指定数组的长度。此时数组的长度，根据元素的个数，自动确定。

<br>　　范例5：斐波那契。
``` c
#include<stdio.h>
main(){	  
	int array[20]={1,1}; 
	int i;
	for(i=2;i<20;i++){
		array[i] = array[i-1]+array[i-2];
	}
	for(i=0;i<20;i++){
		printf("%d ",array[i]);
	}
	putchar('\n');
}
```
    语句解释：
    -  所谓的斐波那契数列就是指，一个数列的前两个数是1，从第三个数开始，每个数都是其前两个数之和。

## 二维数组 ##
<br>　　范例1：二维数组。
``` c
#include<stdio.h>
main(){	  
	int array[5][4]={0}; 
	int i,j;
	for(i=0;i<5;i++){
		for(j=0;j<4;j++){
			printf("%d ",array[i][j]);
		}
		putchar('\n');
	}
	putchar('\n');
}

```
    语句解释：
    -  上面定义一个5行4列的二维数组。二维数组的长度同样不能是变量。
    -  遍历二维数组需要使用两层循环。
    -  所谓的遍历：就是指将数组的所有元素都，使用一遍。

<br>　　范例2：二维数组的初始化。
``` c
#include<stdio.h>
main(){	
//int array[2][2]={};此行有问题
	int i,j;
	for(i=0;i<2;i++){
		for(j=0;j<2;j++){
			printf("%d ",array[i][j]);
		}
		putchar('\n');
	}
	putchar('\n');
}
```
    语句解释：
    -  二维数组的每一行都用一个大括号括起来。

<br>　　范例3：二维数组的初始化2.0。
``` c
#include<stdio.h>
main(){	  
	int array[2][2]={1,2,3,4}; 
	int i,j;
	for(i=0;i<2;i++){
		for(j=0;j<2;j++){
			printf("%d ",array[i][j]);
		}
		putchar('\n');
	}
	putchar('\n');
}

```
    语句解释：
    -  C语言中，数组的每一行所具有的元素的个数是必须相等的。
    -  本例中会把前2个数赋值给第一行的2个变量。把后两个数赋值给第二行的2个变量。

<br>　　范例4：二维数组的初始化3.0。
``` c
#include<stdio.h>
main(){	  
	int array[][2]={1,2,3,4}; 
	int i,j;
	for(i=0;i<2;i++){
		for(j=0;j<2;j++){
			printf("%d ",array[i][j]);
		}
		putchar('\n');
	}
	putchar('\n');
}

```
    语句解释：
    -  在C语言中，可以不指定数组的最高维的长度，但是必须要指定其他维的长度。
    -  程序会自动根据数组的列的长度以及元素的个数来确定行的长度。
    -  如本例中，定义一个2维数组，因此可以不指定最高维的长度。
    -  如果定义的是3维数组，则需要指定第二维和第一维的长度。只有第三维(最高维)可以省写。
    -  扩展：在Java中，恰好相反，定义数组的时候，必须要指定最高维，其他维可以稍后指定。

<br>　　范例5： 二维数组倒置。
``` c
#include<stdio.h>
main(){	  
	int array[3][3]={1,2,3,4,5,6,7,8,9}; 
	int i,j,temp;
    printf("倒置之前数组为：\n");
	for(i=0;i<3;i++){
		for(j=0;j<3;j++){
			printf("%d ",array[i][j]);
		}
		putchar('\n');
	}
	for(i=0;i<3;i++){
		for(j=i+1;j<3;j++){
		   temp = array[i][j];
		   array[i][j] = array[j][i];
		   array[j][i] = temp;
		}
	}
	printf("倒置之后数组为：\n");
	for(i=0;i<3;i++){
		for(j=0;j<3;j++){
			printf("%d ",array[i][j]);
		}
		putchar('\n');
	}
	putchar('\n');
}

```
    语句解释：
    -  所谓的数组倒置，就是指，将数组行上和列上的元素交换位置。
    -  在一个数组内部进行倒置，要求这个数组的行和列的长度必须相同。
    -  本算法，绝对是自创。转载请注明。好吧，不注明，也成。

## 字符数组 ##
　　字符数组，主要用来存储字符串。


<br><br>