---
layout: post
title: "第二章 Lua 程序设计"
date: 2014-09-03 22:07:06 +0800
comments: true
categories: quick-cocos2d-x
---
　　本章主要参考《Programming in Lua》中文版一书，并添加了书中未写到的细节知识。<br>
# 第一节 概述 #
　　目前很多程序语言都专注于帮你编写成千上万行的代码，所以此类型的语言所提供的包、命名空间、复杂的类型系统及无数的结构，有上千页的文档需要操作者学习。 而 Lua 并不帮你编写大量的代码的程序，相反的，Lua 仅让你用少量的代码解决关键问题。为实现这个目标，像其他语言一样 Lua 依赖于其可扩展性。但是与其他语言不同的是，不仅用 Lua 编写的软件易于扩展，而且用其他语言比如 C/C++编写的软件也很容易使用 Lua 扩展其功能。<br>
　　一开始，Lua 就被设计成很容易和传统的 C/C++整合的语言。这种语言的二元性带来了极大的好处。Lua 是一个小巧而简单的语言，因为 Lua不致力于做 C 语言已经做得很好的领域，比如：性能、底层操作以及与第三方软件的接口。Lua 依赖于 C 去做完成这些任务。Lua 所提供的机制是 C 不善于的：高级语言、动态结构、简洁、易于测试和调试等。正因为如此，Lua 具有良好的安全保证，自动内存管理，简便的字符串处理功能及其他动态数据的改变。<br><br>
　　**何为“脚本语言”**<br>

    首先我们来看看“脚本”这个概念是如何产生的。使用Unix系统的人都会敲入一些命令，而命令貌似都是“一次性”或者“可抛
    弃”的。然而不久，人们就发现这些命令其实并不是那么的“一次性”，自己其实一直在重复的敲入类似的命令，所以有人就发
    明了“脚本”这东西。它的设计初衷是“批量式”的执行命令，你在一个文件里把命令都写进去，然后执行这个文件。可是不久
    人们就发现，这些命令行其实可以用更加聪明的方法构造，比如定义一些变量，或者根据系统类型的不同执行不同的命令。
    于是，人们为这脚本语言加入了变量，条件语句，数组，等等构造。“脚本语言”就这样产生了。
    　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　———— 摘自王垠《什么是“脚本语言”》
<br>
　　**Lua独有的特点**<br>
　　除了 Lua 外，还有很多类似的脚本语言，例如：Perl、Tcl、Ruby、Forth、Python虽然其他语言在某些方面与 Lua 有着共同的特色，但下面这些特征是 Lua 特有的：

- 可扩展性。Lua 的扩展性非常卓越，以至于很多人把 Lua 用作搭建领域语言的工具（注：比如游戏脚本）。Lua 被设计为易于扩展的，可以通过 Lua 代码或者C代码扩展， Lua的很多功能都是通过外部库来扩展的。 Lua很容易与C/C++、 java、fortran、Smalltalk、Ada，以及其他语言接口。
- 简单。Lua 本身简单，小巧；内容少但功能强大，这使得 Lua易于学习，很容易实现一些小的应用。他的完全发布版（代码、手册以及某些平台的二进制文件），仅用一张软盘就可以装得下。
- 高效率。Lua 有很高的执行效率，统计表明 Lua是目前平均效率最高的脚本语言。
- 与平台无关。Lua 几乎可以运行在所有我们听说过的系统上，如 NextStep、OS/2、PlayStation II (Sony)、Mac OS-9、OS X、BeOS、MS-DOS、IBM mainframes、EPOC、PalmOS、MCF5206eLITE Evaluation Board、RISC OS，及所有的 Windows 和 Unix。Lua 不是通过使用条件编译实现平台无关，而是完全使用 ANSI (ISO) C，这意味着只要你有 ANSI C 编译器你就可以编译并使用 Lua。<br><br>
　　**Lua类库**<br>
　　Lua 大部分强大的功能来自于他的类库，这并非偶然。Lua 的长处之一就是可以通过新类型和函数来扩展其功能。动态类型检查最大限度允许多态出现，并自动简化调用内存管理的接口，因为这样不需要关心谁来分配内存谁来释放内存，也不必担心数据溢出。高级函数和匿名函数均可以接受高级参数，使函数更为通用。 <br>
　　Lua 自带一个小规模的类库。在受限系统中使用 Lua，如嵌入式系统，我们可以有选择地安装这些类库。若运行环境十分严格，我们甚至可以直接修改类库源代码，仅保留需要的函数。记住：Lua 是很小的（即使加上全部的标准库）并且在大部分系统下你仍可以不用担心的使用全部的功能。<br>
　　如果你真得想学一门语言，参考手册是必备的。本文和 Lua 参考手册互为补充，手册仅仅描述语言本身，因此他既不会告诉你语言的数据结构也不会举例说明。你可以从 http://www.lua.org 可以得到权威性的手册的内容。<br><br>
　　**环境搭建**<br>
　　首先下载Lua编译器，用来编译lua代码。下载地址：http://code.google.com/p/luaforwindows/downloads/list。<br>
　　安装完毕后将Lua的安装路径配置到Path环境变量中，如：“;D:\Program Files\Lua\5.1”这样就可以在cmd中通过“lua”命令来启动lua编译工具了。<br>
<br>**本节参考阅读：**<br>
http://www.yinwang.org/blog-cn/2013/03/29/scripting-language/<br>
http://www.zhihu.com/question/20898488<br>
http://www.ibm.com/developerworks/cn/linux/l-lua.html <br><br>
# 第二节 基础知识 #
## 起点 ##
范例1：hello world。
```
print("Hello World")
```

    语句解释：
    - 创建a.lua文件，并输入本范例中的代码并保存，在cmd中通过执行“lua a.lua”即可运行程序。
    - 注意：直接在Windows右键建立一个txt文件可能会有中文编码问题，可以通过专业的文本编辑软件创建，如EditPlus。
<br>
　　**Chunks**<br>
　　Chunk 和 Java 中的代码块类似，它小到可以仅包含一行代码，大到可以是一系列语句的组合，还可以是函数，在 Lua 中几个 MByte的Chunk 是很常见的。交互模式下的每一行都是一个 Chunk。<br>
　　每个语句结尾的分号（；）是可选的，通常不需要写，但如果同一行有多个语句最好用“；”分开，比如下面的写法是不推荐的，虽然它的语法是正确的：
```
a = 1   b = a*2
```

    语句解释：
    - Lua和js一样，它们的变量是不需要指定数据类型的，你可以随便给变量a赋值数字、字符串、boolean类型的值。
    - Lua代码保存的文件名后缀为.lua 。 
<br>
　　**交互模式**<br>
　　直接在cmd命令行中执行“lua”命令即可进入到 **交互模式** 中。在交互模式下，Lua 通常把每一个行当作一个Chunk，但如果一行不是一个完整的Chunk时，它会等待继续输入直到得到一个完整的Chunk。在Lua等待续行时，显示不同的提示符（一般是>>）。<br>
范例1：进入交互模式。
```
E:\luademo>lua
Lua 5.1.4  Copyright (C) 1994-2008 Lua.org, PUC-Rio
> print("Hello World!!!!")
Hello World!!!!

```

    语句解释：
    - Lua语言是即时编译的，因此可以在交互模式中实现“一边编写，一边运行”。
<br>
　　可以通过指定参数让Lua执行一系列Chunk。例如：假定一个a.lua内有单个语句x=1；另一个b.lua中有语句 print(x)，然后执行下面语句：
```
lua -la -lb
```
　　命令首先在一个 Chunk 内先运行 a 然后运行 b 。（注意：-l 选项会调用 require函数，它会在指定的目录下搜索文件，如果环境变量没有设好，上面的命令可能不能正确运行。 具体后述。